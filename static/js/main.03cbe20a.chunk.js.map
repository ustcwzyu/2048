{"version":3,"sources":["ScoreBoard.js","Tile.js","GameBoard.js","GameOver.js","Game.js","index.js"],"names":["ScoreBox","nextProps","this","props","score","children","_this$props","label","react_default","a","createElement","className","Component","ScoreBoard","_ref","bestScore","additionScores","ScoreBoard_ScoreBox","map","i","key","onAnimationEnd","e","onAdditionScoreAnimationEnd","onClick","onNewGame","Tile","_classMap","cell","col","row","classMap","tile","Object","defineProperty","concat","number","newGenerated","newMerged","classNames","keys","filter","cls","join","y","style","transform","TileContainer","cells","reduce","tiles","j","push","mergediTem","sort","b","uuid","src_Tile_0","getTiles","GridContainer","nextSize","size","Array","fill","_","getGrids","GameBoard","src_ScoreBoard_0","GameBoard_GridContainer","GameBoard_TileContainer","GameOver","Move_Dir","up","down","left","right","tileUUID","Game","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","getInitialState","newTile","handleKeyPress","bind","window","addEventListener","removeEventListener","event","gameStarted","match","toLowerCase","move","preventDefault","localStorage","getItem","fn","forEach","_this2","setState","emptyCells","eachCell","mergedItem","length","index","Math","floor","random","_emptyCells$index","slicedToArray","movable","bottomCell","rightCell","ms","Promise","resolve","setTimeout","dir","_this3","isMoving","dirOffset","hasMovingTile","nextCol","nextRow","nextCell","nextState","toConsumableArray","Date","now","sleep","then","checkGameStatus","isMovable","setItem","GameBoard_GameBoard","assign","handleAdditionScoreAnimationEnd","startNewGame","onSwipe","GameOver_GameOver","scoreItem","slice","_this4","ReactDOM","render","Game_Game","document","getElementById"],"mappings":"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","file":"static/js/main.03cbe20a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport './ScoreBoard.css';\r\n\r\nclass ScoreBox extends Component {\r\n    shouldComponentUpdate (nextProps) {\r\n        return this.props.score !== nextProps.score || this.props.children !== nextProps.children;\r\n    }\r\n\r\n    render() {\r\n        let {label, score, children} = this.props;\r\n        return (\r\n            <div className=\"scorebox\">\r\n                <div className=\"scorelabel\">{label}</div>\r\n                <div className=\"score\">{score}</div>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass ScoreBoard extends Component {\r\n    shouldComponentUpdate({score, bestScore, additionScores}) {\r\n        let props = this.props;\r\n        return props.score !== score ||\r\n            props.bestScore !== bestScore ||\r\n            props.additionScores !== additionScores;\r\n    }\r\n\r\n    render() {\r\n        let props = this.props;\r\n        return(\r\n            <div className=\"scoreBoard\">\r\n                <h1 className=\"title\">2048</h1>\r\n                <ScoreBox score={props.score} label=\"Score\">\r\n                    {\r\n                        props.additionScores.map((score, i) => \r\n                        <div className = \"additionScore\" key={score.key}\r\n                        onAnimationEnd={(e) => props.onAdditionScoreAnimationEnd(e, score, i)}\r\n                        >+{score.score}</div>)\r\n                    }\r\n                </ScoreBox>\r\n                <ScoreBox score = {props.bestScore} label=\"Best\"></ScoreBox>\r\n                <div className=\"text\">\r\n                    <span className=\"bold\">Move and Get the Highest Score</span>\r\n                </div>\r\n                <button className=\"newGame\" onClick={props.onNewGame}>Restart</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScoreBoard;","import React, {Component} from 'react';\r\nimport './Tile.css'\r\n\r\nconst Tile_Width = 100;\r\nconst Tile_Gap = 10;\r\n\r\nclass Tile extends Component {\r\n    render() {\r\n        let{cell, col, row} = this.props;\r\n        //the defination of the tile classes\r\n        let classMap = {\r\n            tile: true,\r\n            [`tile-${cell.number}`]: true,\r\n            //Mark the new tile\r\n            'tile-new': cell.newGenerated,\r\n            //Mark the new tile which is merged\r\n            'tile-merged': !!cell.newMerged\r\n        };\r\n        let classNames = Object.keys(classMap).filter(cls => !!classMap[cls]).join(' ');\r\n        let x = col * (Tile_Width + Tile_Gap) + 'px';\r\n        let y = row * (Tile_Width + Tile_Gap) + 'px';\r\n        let style = {\r\n            transform: `translate3d(${x}, ${y}, 0)`\r\n        };\r\n        return (\r\n            <div className={classNames} style={style}>\r\n                <div className = \"tile-inner\">{cell.number}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tile;","import React, { Component } from 'react';\r\nimport ScoreBoard from './ScoreBoard';\r\nimport Tile from './Tile';\r\nimport './GameBoard.css';\r\n\r\nclass TileContainer extends Component {\r\n    getTiles () {\r\n        return this.props.cells.reduce((tiles, row, i) =>\r\n            row.reduce((tiles, cell, j) => {\r\n                if (cell) {\r\n                    tiles.push({cell, row: i, col :j});\r\n                    if (cell.mergediTem) {\r\n                        tiles.push({cell: cell.mergediTem, row : i , col : j});\r\n                    }\r\n                }\r\n                return tiles;\r\n            }, tiles)\r\n        ,[])\r\n        .sort((a, b) => a.cell.uuid - b.cell.uuid)\r\n        .map(tile => <Tile key={'tile'+tile.cell.uuid} cell={tile.cell} col={tile.col} row={tile.row}></Tile>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"tileContainer\">\r\n                {this.getTiles()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass GridContainer extends Component {\r\n    shouldComponentUpdate({nextSize}) {\r\n        let {size} = this.props;\r\n        return size !== nextSize;\r\n    }\r\n\r\n    getGrids() {\r\n        let {size} = this.props;\r\n        let row = i =>\r\n            new Array(size).fill().map((_, j) =>\r\n                <div className = \"gridCell\" key={`gridCell${i * size + j}`}></div>\r\n        );\r\n        return new Array(size).fill().map((_, i) => row(i));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"gridContainer\">{this.getGrids()}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default function GameBoard (props) {\r\n    return (\r\n        <div className=\"gameBoard\">\r\n            <ScoreBoard {...props}/>\r\n            <div className=\"gameBox\">\r\n                <GridContainer size={props.size}/>\r\n                <TileContainer cells={props.cells}/>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './GameOver.css';\r\n\r\nexport default function GameOver ({onNewGame}) {\r\n    return <div className=\"gameOver\">\r\n        <h1 className= \"title\">Game Over!</h1>\r\n        <button onClick={onNewGame}>Restart?</button>\r\n    </div>;\r\n}","import React, {Component} from 'react';\r\nimport GameBoard from './GameBoard';\r\nimport GameOver from './GameOver';\r\nimport Promise from 'promise';\r\n\r\n//the direction of moving\r\nconst Move_Dir = {\r\n    up:[0,-1],\r\n    down:[0,1],\r\n    left:[-1,0],\r\n    right:[1,0]\r\n};\r\n\r\nlet tileUUID = 0;\r\n\r\nexport default class Game extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = this.getInitialState();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.newTile();\r\n        this.newTile();\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        window.addEventListener('keydown', this.handleKeyPress);\r\n    }\r\n\r\n    componentWillMount() {\r\n        window.removeEventListener('keydown', this.handleKeyPress);\r\n    }\r\n\r\n    handleKeyPress (event) {\r\n        let {key} = event;\r\n        if (!this.state.gameStarted) return;\r\n        let match = key.toLowerCase().match(/arrow(up|right|down|left)/);\r\n        if (match) {\r\n            this.move(match[1]);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    getInitialState() {\r\n        let size = this.props.size || 4;\r\n        let cells = [];\r\n        for (let i = 0; i < size; i++) {\r\n            let row = cells[i] = [];\r\n            for (let j = 0; j < size; j++) {\r\n                row[j] = null;\r\n            }\r\n        }\r\n        return {\r\n            size, cells,\r\n            gameStarted: true,\r\n            additionScores: [],\r\n            score: 0,\r\n            bestScore: +localStorage.getItem('bestScore')\r\n        };\r\n    }\r\n    \r\n    eachCell (state, fn) {\r\n        return state.cells.forEach((row, i) =>\r\n            row.forEach((cell, j) => fn(cell, i, j))\r\n        );\r\n    }\r\n\r\n    newTile() {\r\n        this.setState(state => {\r\n            let cells = this.state.cells;\r\n            let emptyCells = [];\r\n            this.eachCell(state, (cell, i, j) => {\r\n                if (!cell) {\r\n                    emptyCells.push([i, j]);\r\n                } else if (cell.mergedItem) {\r\n                    cell.number += cell.mergedItem.number;\r\n                    cell.newMerged = true;\r\n                }\r\n            });\r\n            if (emptyCells.length) {\r\n                let index = Math.floor(Math.random() * emptyCells.length);\r\n                let [row, cell] = emptyCells[index];\r\n                cells[row][cell] = {\r\n                    number: Math.random() > 0.9 ? 4 : 2,\r\n                    newGenerated:true,\r\n                    newMerged:true,\r\n                    mergedItem:null,\r\n                    uuid:tileUUID++\r\n                };\r\n            }\r\n            return {cells};\r\n        });\r\n    }\r\n\r\n    isMovable() {\r\n        let movable = false;\r\n        let cells = this.state.cells;\r\n        let size = this.state.size;\r\n        this.eachCell(this.state,(cell, i, j) => {\r\n            if (movable) return;\r\n            if (!cell) {\r\n                movable = true;\r\n                return;\r\n            }\r\n            if (i < size-1) {\r\n                let bottomCell = cells[i+1][j];\r\n                if (bottomCell && bottomCell.number === cell.number) {\r\n                    movable =true;\r\n                    return;\r\n                }\r\n            }\r\n            if (j < size-1) {\r\n                let rightCell = cells[i][j+1];\r\n                if (rightCell && rightCell.number === cell.number) {\r\n                    movable = true;\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n        return movable;\r\n    }\r\n\r\n    sleep (ms) {\r\n        return new Promise((resolve) => {\r\n            setTimeout(resolve, ms);\r\n        });\r\n    }\r\n\r\n    move (dir) {\r\n        if (this.isMoving) return;\r\n        let size = this.state.size;\r\n        let cells = this.state.cells;\r\n        let dirOffset = Move_Dir[dir];\r\n        let hasMovingTile = false;\r\n        let score = 0;\r\n\r\n        for (let i = 0; i < size; i++) {\r\n            for (let j = 0; j < size; j++) {\r\n                let row = i, col = j;\r\n                if (dir === 'right') {\r\n                    col = size - j - 1;\r\n                }\r\n                if (dir === 'down') {\r\n                    row = size - i - 1;\r\n                }\r\n\r\n                let cell = cells[row][col];\r\n                if (!cell) continue;\r\n\r\n                cell.newGenerated = false;\r\n                cell.newMerged = false;\r\n                cell.mergedItem = null;\r\n\r\n                let nextCol = col + dirOffset[0];\r\n                let nextRow = row + dirOffset[1];\r\n                let nextCell;\r\n\r\n                while(nextCol >= 0 && nextCol < size && nextRow >= 0 && nextRow < size) {\r\n                    nextCell = cells[nextRow][nextCol];\r\n                    if (nextCell) {\r\n                        break;\r\n                    }\r\n                    nextCol += dirOffset[0];\r\n                    nextRow += dirOffset[1];\r\n                }\r\n                \r\n                if (nextCell && !nextCell.mergedItem && nextCell.number === cell.number) {\r\n                    cell.mergedItem =nextCell;\r\n                    cells[nextRow][nextCol] = cell;\r\n                    cells[row][col] = null;\r\n                    hasMovingTile = true;\r\n                    score += nextCell.number + cell.number;\r\n                } else {\r\n                    nextCol -= dirOffset[0];\r\n                    nextRow -= dirOffset[1];\r\n\r\n                    if (nextCol !== col || nextRow !== row) {\r\n                        cells[nextRow][nextCol] = cell;\r\n                        cells[row][col] = null;\r\n                        hasMovingTile = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (hasMovingTile) {\r\n            this.isMoving = true;\r\n\r\n            this.setState(state => {\r\n                let nextState = {\r\n                    cells,\r\n                    score:state.score + score\r\n                };\r\n                if (score) {\r\n                    nextState.additionScores = [...state.additionScores, {score, key: 'score' + Date.now()}];\r\n                }\r\n                return nextState;\r\n            });\r\n\r\n\r\n            this.sleep(80)\r\n                .then(()=> {\r\n                    this.newTile();\r\n                    this.checkGameStatus();\r\n                    this.isMoving = false;\r\n                });\r\n        }\r\n    }\r\n\r\n    checkGameStatus() {\r\n        let movable = this.isMovable();\r\n        if(!movable) {\r\n            let bestScore = this.state.bestScore;\r\n            if (bestScore < this.state.score) {\r\n                bestScore = this.state.score;\r\n                localStorage.setItem('bestScore', bestScore);\r\n            }\r\n            this.setState({gameStarted:false, bestScore});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <GameBoard\r\n                {...this.state}\r\n                onAdditionScoreAnimationEnd = {this.handleAdditionScoreAnimationEnd.bind(this)}\r\n                onNewGame={this.startNewGame.bind(this)}\r\n                onSwipe={this.move.bind(this)}\r\n                >\r\n                {!this.state.gameStarted &&\r\n                    <GameOver onNewGame={this.startNewGame.bind(this)}></GameOver>\r\n                }\r\n                </GameBoard>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleAdditionScoreAnimationEnd(event, scoreItem, index) {\r\n        this.setState(state => {\r\n            let additionScores = state.additionScores;\r\n            return {additionScores:[...additionScores.slice(0,index), ...additionScores.slice(index+1)]};\r\n        });\r\n    }\r\n\r\n    startNewGame() {\r\n        setTimeout(() => {\r\n            tileUUID = 0;\r\n            this.setState(this.getInitialState());\r\n            this.newTile();\r\n            this.newTile();\r\n        }, 0);\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\nimport './index.css';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}